#include <stdio.h>
#include <stdlib.h>

struct node {
    int value;
    struct node *next;
    struct node *prev;
};

typedef struct node *NODE;

NODE getnode() {
    NODE ptr = (NODE)malloc(sizeof(struct node));
    if (ptr == NULL) {
        printf("Memory not allocated\n");
        return NULL;
    }
    return ptr;
}

NODE insert_beg(NODE first, int item) {
    NODE new = getnode();
    if (new == NULL) return first;
    new->value = item;
    new->next = first;
    new->prev = NULL;
    if (first != NULL) {
        first->prev = new;
    }
    return new;
}

NODE insert_left(NODE first, int item, int key) {
    int count = 1;
    NODE new = getnode();
    new->value = item;
    new->prev = NULL;
    new->next = NULL;
    NODE curr = first;

    if (first == NULL) {
        return insert_beg(first, item);
    }

    while (curr != NULL && count != key) {
        curr = curr->next;
        count++;
    }

    if (curr != NULL) {
        new->next = curr;
        new->prev = curr->prev;

        if (curr->prev != NULL) {
            curr->prev->next = new;
        } else {
            first = new;
        }
        curr->prev = new;
    } else {
        printf("Position not found.\n");
    }

    return first;
}

NODE delete_value(NODE first, int ele) {
    if (first == NULL) {
        return NULL;
    }
    NODE curr = first;

    while (curr != NULL && curr->value != ele) {
        curr = curr->next;
    }

    if (curr == NULL) {
        printf("Value not found.\n");
        return first;
    }

    if (curr->prev != NULL) {
        curr->prev->next = curr->next;
    } else {
        first = curr->next;
    }

    if (curr->next != NULL) {
        curr->next->prev = curr->prev;
    }

    free(curr);
    return first;
}

void display(NODE first) {
    if (first == NULL) {
        printf("Doubly linked list is empty.\n");
        return;
    }
    NODE temp = first;
    while (temp != NULL) {
        printf("%d ", temp->value);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int ch, ele, pos, key;
    NODE head = NULL;

    while (1) {
        printf("1. Insert new node left of a node\n");
        printf("2. Delete node based on value\n");
        printf("3. Display\n");
        printf("4. Insert at beginning\n");
        printf("Enter choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("Enter the element: ");
                scanf("%d", &ele);
                printf("Enter the position: ");
                scanf("%d", &key);
                head = insert_left(head, ele, key);
                break;
            case 2:
                printf("Enter the element: ");
                scanf("%d", &ele);
                head = delete_value(head, ele);
                break;
            case 3:
                display(head);
                break;
            case 4:
                printf("Enter the element: ");
                scanf("%d", &ele);
                head = insert_beg(head, ele);
                break;
            default:
                printf("Wrong choice.\n");
        }
    }

    return 0;
}
