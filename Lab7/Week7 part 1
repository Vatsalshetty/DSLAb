CONCATINATING...(TWO LINKED LISTS)

#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node *link;
};
typedef struct Node node;
node *start1=NULL,*start2=NULL,*temp,*new1,*curr,*start;
void create1();
void create2();
void concatenate();
void display();
int ch;
char c;
void main(){
    while(1){
        printf("\n1.Create 1st linked list\n2.Create 2nd linked list\n3.Concatenate\n4.Display\n5.Exit\n");
        printf("Enter your choice:");
        scanf("%d",&ch);
        switch(ch){
            case 1:create1();
                    break;
            case 2:create2();
                    break;
            case 3:concatenate();
                    break;
            case 4:display();
                    break;
            case 5:exit(0);
                    break;
        }
    }
}
void create1(){
    do{
        new1=(node*)malloc(sizeof(node));
        printf("Enter value:");
        scanf("%d",&new1->data);
        if(start1==NULL){
            start1=new1;
            curr=new1;
        }else{
            curr->link=new1;
            curr=new1;
        }
        printf("Do you want to add another element(Y/N):");
        scanf("%s",&c);
    }while(c=='y' || c=='Y');
    curr->link=NULL;
}
void create2(){
    do{
        new1=(node*)malloc(sizeof(node));
        printf("Enter value:");
        scanf("%d",&new1->data);
        if(start2==NULL){
            start2=new1;
            curr=new1;
        }else{
            curr->link=new1;
            curr=new1;
        }
        printf("Do you want to add another element(Y/N):");
        scanf("%s",&c);
    }while(c=='y' || c=='Y');
    curr->link=NULL;
}
void display(){
    if(start==NULL){
        printf("Linked list is empty");
        return;
    }
    temp=start;
    printf("Elements in the linked list are:\n");
    while(temp!=NULL){
        printf("%d\t",temp->data);
        temp=temp->link;
    }
}
void concatenate(){
    if(start1==NULL && start2==NULL){
        printf("Linked list is empty");
        return;
    }
    if(start1==NULL){
        start=start2;
        return;
    }
    if(start2==NULL){
        start=start1;
        return;
    }
    temp=start1;
    while(temp->link!=NULL){
        temp=temp->link;
    }
    temp->link=start2;
    start=start1;
    start1=NULL;
    start2=NULL;
}
---------------------------
REVERSING AND SORTING....USING LINKED LISTS...

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void reverse(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void sort(struct Node* head) {
    if (head == NULL) return;

    struct Node* i = head;
    struct Node* j = NULL;
    int temp;

    while (i != NULL) {
        j = i->next;
        while (j != NULL) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
            j = j->next;
        }
        i = i->next;
    }
}

void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* list1 = createNode(5);
    list1->next = createNode(10);
    list1->next->next = createNode(15);

    reverse(&list1);
    printf("After reversal: ");
    printList(list1);

    sort(list1);
    printf("After sorting: ");
    printList(list1);

    return 0;
}

