IMPLEMENTATION OF STACKS AND QUEUES USING LINKED LISTS...

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack is empty.\n");
        return -1;
    }
    struct Node* temp = *top;
    int poppedValue = temp->data;
    *top = (*top)->next;
    free(temp);
    return poppedValue;
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }
    newNode->data = data;
    newNode->next = NULL;

    if (*rear == NULL) {
        *front = *rear = newNode;
        return;
    }

    (*rear)->next = newNode;
    *rear = newNode;
}

int dequeue(struct Node** front) {
    if (*front == NULL) {
        printf("Queue is empty.\n");
        return -1;
    }
    struct Node* temp = *front;
    int dequeuedValue = temp->data;
    *front = (*front)->next;
    free(temp);
    return dequeuedValue;
}

void printList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* stackTop = NULL;
    printf("Stack Operations:\n");

    push(&stackTop, 10);
    push(&stackTop, 20);
    push(&stackTop, 30);
    printf("Stack after pushing 10, 20, 30: ");
    printList(stackTop);

    printf("Popped: %d\n", pop(&stackTop));
    printf("Stack after popping: ");
    printList(stackTop);

    struct Node* queueFront = NULL;
    struct Node* queueRear = NULL;
    printf("\nQueue Operations:\n");

    enqueue(&queueFront, &queueRear, 10);
    enqueue(&queueFront, &queueRear, 20);
    enqueue(&queueFront, &queueRear, 30);
    printf("Queue after enqueuing 10, 20, 30: ");
    printList(queueFront);

    printf("Dequeued: %d\n", dequeue(&queueFront));
    printf("Queue after dequeue: ");
    printList(queueFront);

    return 0;
}
